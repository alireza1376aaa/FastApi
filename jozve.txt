## آموزش کامل FastAPI

### **مقدمه**
FastAPI یک فریمورک مدرن، سریع و کارآمد برای ساخت APIهای وب است که بر اساس تایپ‌هینت‌های پایتون ساخته شده و از استاندارد OpenAPI پشتیبانی می‌کند. این فریمورک از تایپ‌هینت‌ها برای اعتبارسنجی خودکار داده‌ها، تکمیل کد در ویرایشگر و مستندات خودکار بهره می‌برد.

---

## **۱. نصب FastAPI و اجرای اولین پروژه**
### **🔹 نصب FastAPI**
```bash
pip install "fastapi[standard]"
```

برای اجرای سرور نیاز به **Uvicorn** داریم:
```bash
pip install uvicorn
```

### **🔹 اولین پروژه با FastAPI**
```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}
```

### **🔹 اجرای سرور**
```bash
uvicorn main:app --reload
```

بعد از اجرای سرور، مستندات API در این مسیرها در دسترس خواهد بود:
- **Swagger UI**: [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)
- **ReDoc**: [http://127.0.0.1:8000/redoc](http://127.0.0.1:8000/redoc)

---

## **۲. پارامترهای مسیر (Path Parameters)**
### **🔹 تعریف پارامتر مسیر**
```python
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```
✅ مقدار `item_id` به‌عنوان یک عدد صحیح در مسیر API قرار می‌گیرد.

### **🔹 تعریف مقدار ثابت و پویا در مسیر**
```python
@app.get("/users/me")
async def read_current_user():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```
✅ مسیر `/users/me` ثابت است و `/users/{user_id}` مقدار پویا می‌گیرد.

---

## **۳. پارامترهای کوئری (Query Parameters)**
### **🔹 تعریف پارامترهای کوئری اختیاری**
```python
@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```
✅ مقدار `skip` و `limit` در URL به‌صورت **کوئری پارامتر** ارسال می‌شود.

### **🔹 تعریف پارامترهای کوئری اجباری**
```python
@app.get("/items/{item_id}")
async def read_user_item(item_id: str, needy: str):
    return {"item_id": item_id, "needy": needy}
```
✅ مقدار `needy` حتماً باید در **کوئری‌استرینگ** قرار بگیرد.

---

## **۴. ارسال داده در بدنه درخواست (Request Body)**
### **🔹 تعریف مدل Pydantic برای دریافت داده‌ها**
```python
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

### **🔹 استفاده از مدل در مسیر API**
```python
@app.post("/items/")
async def create_item(item: Item):
    return item
```
✅ این مدل **بدنه درخواست (Request Body)** را به‌صورت JSON دریافت و اعتبارسنجی می‌کند.

---

## **۵. اعتبارسنجی مقادیر با Field()**
### **🔹 استفاده از `Field()` برای تعیین محدودیت‌ها**
```python
from pydantic import Field

class Product(BaseModel):
    name: str = Field(..., title="نام محصول", example="iPhone 13")
    price: float = Field(..., title="قیمت محصول", gt=0, example=999.99)
```
✅ `Field()` برای **اعمال محدودیت و توضیحات در مدل‌های Pydantic** استفاده می‌شود.

### **🔹 ارسال درخواست معتبر به API**
```json
{
    "name": "iPhone 13",
    "price": 999.99
}
```
✅ مقدار `price` باید **بزرگتر از صفر** باشد.

---

## **۶. اضافه کردن متادیتای سفارشی با `extra`**
### **🔹 استفاده از `extra` برای اطلاعات اضافی**
```python
class Product(BaseModel):
    name: str = Field(..., title="نام محصول", extra={"brand": "Apple"})
    price: float = Field(..., title="قیمت", extra={"currency": "USD"})
```
✅ اطلاعات `extra` در مستندات OpenAPI نمایش داده می‌شود.

📌 **خروجی در OpenAPI:**
```json
{
    "name": {
        "title": "نام محصول",
        "extra": {"brand": "Apple"}
    },
    "price": {
        "title": "قیمت",
        "extra": {"currency": "USD"}
    }
}
```

---

## **📌 جمع‌بندی**
✅ `FastAPI` از تایپ‌هینت‌ها برای **اعتبارسنجی و مستندسازی خودکار** استفاده می‌کند.  
✅ می‌توان **پارامترهای مسیر، کوئری و بدنه درخواست** را به‌راحتی کنترل کرد.  
✅ با `Field()` می‌توان محدودیت‌ها و توضیحات **به مدل‌های Pydantic** اضافه کرد.  
✅ `extra` امکان **اضافه کردن متادیتای سفارشی** برای توضیحات بهتر را فراهم می‌کند.  

🚀 **این جزوه تمامی مفاهیم پایه‌ای FastAPI را پوشش می‌دهد. در صورت داشتن سوال، می‌توان جزئیات بیشتری اضافه کرد!** 😊

