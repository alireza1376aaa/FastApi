# 📚 **جزوه آموزش FastAPI - از مقدماتی تا پیشرفته**

---

## **🌐 فصل ۱: معرفی FastAPI**

**FastAPI** یک فریم‌ورک قدرتمند برای توسعه **APIهای سریع و بهینه** در **Python** است که امکاناتی مانند **اعتبارسنجی خودکار داده‌ها، مستندات خودکار، و پردازش سریع** را فراهم می‌کند.

✅ **مزایای FastAPI:**
- بسیار سریع و بهینه 🚀
- پشتیبانی از **Async/Await** برای پردازش هم‌زمان
- تولید **مستندات خودکار** در مسیر `/docs`
- پشتیبانی قوی از **Pydantic** برای اعتبارسنجی داده‌ها
- مدیریت **پارامترها، کوکی‌ها، هدرها، و درخواست‌ها** به‌صورت پیشرفته

---

## **📝 فصل ۲: دریافت و مدیریت داده‌ها**

FastAPI امکان دریافت داده‌ها از منابع مختلف را فراهم می‌کند:

### **📌 ۱. مدیریت پارامترهای مسیر (Path Parameters)**
```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```
✅ **نکات:**
- مقدار `item_id` باید عدد باشد (`int`).
- مسیر **داینامیک** است و مقدار `item_id` مستقیماً در `URL` مشخص می‌شود.

---

### **📋 ۲. مدیریت پارامترهای کوئری (Query Parameters)**
```python
@app.get("/search/")
async def search_items(q: str = None):
    return {"query": q}
```
✅ **نکات:**
- مقدار `q` می‌تواند در `URL` به‌صورت `?q=example` ارسال شود.
- مقدار آن اختیاری (`None`) است.

---

### **🏧 ۳. دریافت داده‌های `Body`**
```python
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float

@app.post("/items/")
async def create_item(item: Item):
    return item
```
✅ **نکات:**
- مقدار `Body` باید یک **مدل Pydantic** باشد.
- اعتبارسنجی داده‌ها **به‌صورت خودکار** انجام می‌شود.

---

## **🎮 فصل ۳: کار با داده‌های پیچیده (Nested Models)**

FastAPI امکان مدیریت **مدل‌های تو در تو** را فراهم می‌کند:

```python
class Image(BaseModel):
    url: str
    name: str

class Item(BaseModel):
    name: str
    price: float
    image: Image | None = None
```
✅ **نکات:**
- مقدار `image` می‌تواند یک **مدل Pydantic** دیگر باشد.
- مقادیر **اختیاری** را می‌توان با `None` مشخص کرد.

---

## **🎨 فصل ۴: انواع داده‌های پیشرفته**

FastAPI از **انواع داده‌های پیشرفته** پشتیبانی می‌کند:

| نوع داده | توضیح |
|----------|---------|
| `UUID` | شناسه یکتا |
| `datetime` | تاریخ و زمان |
| `timedelta` | مدت‌زمان |
| `frozenset` | مجموعه غیرقابل تغییر |
| `bytes` | داده‌های باینری |
| `Decimal` | عدد اعشاری دقیق |

✅ **مثال استفاده از `datetime` و `UUID`**:
```python
from datetime import datetime
from uuid import UUID

@app.get("/logs/{log_id}")
async def get_log(log_id: UUID, timestamp: datetime):
    return {"log_id": log_id, "timestamp": timestamp}
```

---

## **🏆 فصل ۵: مدیریت کوکی‌ها و هدرها**

### **🍪 ۱. دریافت مقدار `Cookie`**
```python
from fastapi import Cookie

@app.get("/get-cookie/")
async def get_cookie(session_id: str = Cookie(None)):
    return {"session_id": session_id}
```
✅ **نکته:** مقدار کوکی **از درخواست خوانده می‌شود**.

---

### **🎮 ۲. تنظیم کوکی در پاسخ (`Response.set_cookie`)**
```python
from fastapi import Response

@app.get("/set-cookie/")
async def set_cookie(response: Response):
    response.set_cookie(key="session_id", value="abc123")
    return {"message": "Cookie set!"}
```
✅ **نکته:** مقدار کوکی در مرورگر ذخیره می‌شود.

---

### **🛏️ ۳. دریافت هدرهای `Header`**
```python
from fastapi import Header

@app.get("/headers/")
async def get_headers(user_agent: str = Header(None)):
    return {"User-Agent": user_agent}
```
✅ **نکته:** مقدار `User-Agent` از هدر HTTP خوانده می‌شود.

---

## **🏅 فصل ۶: اعتبارسنجی و جلوگیری از داده‌های اضافی**

### **🔒 جلوگیری از ارسال داده‌های اضافی در `Pydantic`**
```python
class SecureModel(BaseModel):
    model_config = {"extra": "forbid"}
    session_id: str
```
✅ **اگر کلاینت مقدار اضافی ارسال کند، API خطای `422 Unprocessable Entity` برمی‌گرداند.**

---

## **🔧 فصل ۷: تنظیم و دریافت `Response Headers`**

```python
@app.get("/set-headers/")
async def set_headers(response: Response):
    response.headers["X-Request-ID"] = "abc123"
    response.headers["Cache-Control"] = "no-cache"
    return {"message": "Headers set!"}
```
✅ **مقدار `X-Request-ID` در پاسخ تنظیم می‌شود.**

---

# 💡 **جمع‌بندی**
✅ دریافت **پارامترهای مسیر، کوئری، بدنه، و مدل‌های Pydantic**
✅ کار با **داده‌های پیچیده، کوکی‌ها، و هدرهای HTTP**
✅ اعتبارسنجی پیشرفته با **Pydantic و مدل‌های منعطف**
✅ کنترل **هدرهای پاسخ (`Response Headers`) و جلوگیری از داده‌های اضافی**

🚀 **حالا آماده‌ای برای ساخت APIهای حرفه‌ای؟** 😎

