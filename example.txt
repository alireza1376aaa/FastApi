عالیه! تمرین‌ها به یادگیری عمیق‌تر کمک می‌کنن. اینجا چند تمرین با **سطوح مختلف** برات آماده کردم که **مهارت FastAPI** تو رو تقویت می‌کنه. سعی کن بدون نگاه کردن به جواب‌ها انجامشون بدی. 😊🚀

---

## **✅ تمرین ۱: ایجاد یک API ساده**
**📝 وظیفه:**  
یک **API ساده** با FastAPI بساز که یک **مسیر `/hello`** داشته باشد و وقتی کسی این مسیر را صدا می‌زند، پاسخ زیر را دریافت کند:

📌 **ورودی:**  
- یک **پارامتر اختیاری** به نام `name` از نوع **query parameter** (اگر مقدار نداشته باشد، مقدار پیش‌فرض `"Guest"` باشد.)

📌 **خروجی:**  
- مقدار `{"message": "Hello {name}"}` را برگرداند.

🎯 **مثال‌های ورودی و خروجی:**
```
http://127.0.0.1:8000/hello?name=Ali
```
```json
{"message": "Hello Ali"}
```

```
http://127.0.0.1:8000/hello
```
```json
{"message": "Hello Guest"}
```

---

## **✅ تمرین ۲: دریافت آیتم بر اساس ID (Path Parameter)**
**📝 وظیفه:**  
یک مسیر `/items/{item_id}` ایجاد کن که وقتی یک **ID** دریافت می‌کند، یک آیتم فرضی را نمایش دهد.

📌 **ورودی:**  
- `item_id`: عدد صحیح **(Path Parameter)**

📌 **خروجی:**  
- آیتمی با فرمت زیر را برگرداند:
```json
{
    "item_id": 5,
    "name": "Laptop",
    "price": 1200.50
}
```
(می‌توانی مقدار آیتم را **ثابت** در نظر بگیری، نیازی به پایگاه داده نیست!)

🎯 **مثال درخواست و پاسخ:**
```
http://127.0.0.1:8000/items/5
```
```json
{
    "item_id": 5,
    "name": "Laptop",
    "price": 1200.50
}
```

---

## **✅ تمرین ۳: اعتبارسنجی ورودی‌ها در Query Parameters**
**📝 وظیفه:**  
یک مسیر `/search/` ایجاد کن که **دو پارامتر عددی** دریافت کند و مجموع آن‌ها را محاسبه کند.  
اما ورودی‌ها باید:
- **بزرگ‌تر از ۰ باشند.**
- **حداکثر مقدار ۱۰۰ داشته باشند.**

📌 **ورودی:**  
- `num1`: عدد صحیح بین 1 تا 100  
- `num2`: عدد صحیح بین 1 تا 100  

📌 **خروجی:**  
```json
{"num1": 10, "num2": 20, "sum": 30}
```

🎯 **مثال درخواست و پاسخ:**
```
http://127.0.0.1:8000/search/?num1=10&num2=20
```
```json
{"num1": 10, "num2": 20, "sum": 30}
```

📌 **درخواست نامعتبر (`num1=150` که خارج از محدوده است):**
```
http://127.0.0.1:8000/search/?num1=150&num2=20
```
📌 **خروجی (خطای FastAPI):**
```json
{
  "detail": [
    {
      "msg": "Input should be less than or equal to 100"
    }
  ]
}
```

---

## **✅ تمرین ۴: مدل Pydantic برای ثبت محصول**
**📝 وظیفه:**  
یک مسیر `/products/` با روش `POST` ایجاد کن که اطلاعات **یک محصول جدید** را دریافت کند و اطلاعات را برگرداند.

📌 **ورودی:**  
یک **مدل Pydantic** شامل:
- `name`: **رشته** (حداقل ۳ حرف و حداکثر ۵۰ حرف)
- `price`: **عدد اعشاری** (باید **بزرگ‌تر از صفر** باشد)
- `in_stock`: **بولین** (مشخص کند که محصول موجود هست یا نه)

📌 **خروجی:**  
```json
{
    "name": "Smartphone",
    "price": 999.99,
    "in_stock": true
}
```

🎯 **مثال درخواست (ارسال POST به `/products/`):**
```json
{
    "name": "Smartphone",
    "price": 999.99,
    "in_stock": true
}
```

---

## **✅ تمرین ۵: محدود کردن مقادیر ورودی با `Literal`**
**📝 وظیفه:**  
یک مسیر `/users/` ایجاد کن که یک **پارامتر `role`** داشته باشد و فقط مقادیر مشخصی را بپذیرد.

📌 **ورودی:**  
- `role`: فقط می‌تواند `"admin"`, `"user"`, `"guest"` باشد. (از `Literal` استفاده کن)

📌 **خروجی:**  
```json
{
    "role": "admin",
    "message": "Welcome Admin!"
}
```

🎯 **مثال درخواست و پاسخ:**
```
http://127.0.0.1:8000/users/?role=admin
```
```json
{
    "role": "admin",
    "message": "Welcome Admin!"
}
```

📌 **درخواست نامعتبر (`role=manager` مجاز نیست):**
```
http://127.0.0.1:8000/users/?role=manager
```
📌 **خروجی (خطای FastAPI):**
```json
{
  "detail": [
    {
      "msg": "Input should be 'admin', 'user' or 'guest'"
    }
  ]
}
```

---

## **🚀 سطح حرفه‌ای (اختیاری)**
💡 اگر تمرین‌های بالا رو انجام دادی، این چالش رو حل کن!

**📝 وظیفه:**  
یک مسیر `/calculate/` ایجاد کن که **دو عدد صحیح** و یک **عملگر ریاضی** (`+`, `-`, `*`, `/`) دریافت کند و **نتیجه را برگرداند**.

📌 **ورودی:**  
- `num1`: عدد صحیح  
- `num2`: عدد صحیح  
- `operation`: فقط یکی از `+`, `-`, `*`, `/` باشد.  

📌 **خروجی:**  
```json
{
    "num1": 10,
    "num2": 5,
    "operation": "+",
    "result": 15
}
```

🎯 **مثال درخواست و پاسخ:**
```
http://127.0.0.1:8000/calculate/?num1=10&num2=5&operation=+
```
```json
{
    "num1": 10,
    "num2": 5,
    "operation": "+",
    "result": 15
}
```

📌 **درخواست نامعتبر (`operation=^` مجاز نیست):**
```
http://127.0.0.1:8000/calculate/?num1=10&num2=5&operation=^
```
📌 **خروجی (خطای FastAPI):**
```json
{
  "detail": [
    {
      "msg": "Input should be '+', '-', '*' or '/'"
    }
  ]
}
```

---

## **🎯 نتیجه‌گیری**
✅ این تمرین‌ها کمکت می‌کنن تا **FastAPI** رو **بهتر درک کنی و کاربردی‌تر یاد بگیری**.  
✅ **جواب تمرین‌ها رو بنویس و اجرا کن**، اگر مشکل داشتی بهم بگو تا کمکت کنم! 😊🚀