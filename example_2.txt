📌 تمرین‌های عملی FastAPI
🚀 تمرین ۱: مدیریت پارامترهای مسیر و کوئری
🔹 هدف: ساخت یک مسیر که اطلاعات یک محصول را بر اساس item_id دریافت کند و با یک فیلتر اختیاری q نتیجه را اصلاح کند.

✅ وظایف:

یک مسیر GET /items/{item_id} تعریف کن.
مقدار item_id باید عددی (int) باشد.
یک پارامتر کوئری اختیاری (q) داشته باشد که در پاسخ برگردانده شود.
اگر q مقدار نداشت، مقدار "No filter applied" برگردانده شود.
📌 مثال ورودی:

bash
Copy
Edit
GET /items/10?q=laptop
✅ خروجی مورد انتظار:

json
Copy
Edit
{
  "item_id": 10,
  "query": "laptop"
}
🍪 تمرین ۲: کار با کوکی‌ها
🔹 هدف: ساخت دو مسیر برای تنظیم و دریافت کوکی‌های کاربر.

✅ وظایف:

مسیر GET /set-cookie/ که یک کوکی به نام user_id را مقداردهی کند.
مسیر GET /get-cookie/ که مقدار کوکی user_id را دریافت و در خروجی نمایش دهد.
مقدار پیش‌فرض user_id باید "guest" باشد، اگر کوکی تنظیم نشده بود.
📌 مثال استفاده:

sql
Copy
Edit
GET /set-cookie/ → تنظیم کوکی
GET /get-cookie/ → دریافت مقدار کوکی
✅ خروجی مورد انتظار:

json
Copy
Edit
{
  "user_id": "guest"
}
📩 تمرین ۳: مدیریت هدرها در درخواست‌ها
🔹 هدف: ساخت مسیری که هدر User-Agent را دریافت و در پاسخ نمایش دهد.

✅ وظایف:

یک مسیر GET /headers/ بساز که مقدار User-Agent را دریافت کند.
اگر مقدار User-Agent ارسال نشد، مقدار پیش‌فرض "Unknown" را نمایش دهد.
📌 مثال استفاده:

bash
Copy
Edit
GET /headers/
✅ خروجی مورد انتظار:

json
Copy
Edit
{
  "User-Agent": "Mozilla/5.0"
}
🛍️ تمرین ۴: کار با مدل‌های تو در تو (Nested Models)
🔹 هدف: ساخت یک API برای محصولات که شامل اطلاعات تصویر محصول هم باشد.

✅ وظایف:

یک مدل Image که دارای فیلدهای زیر باشد:\n
url: str (الزامی)\n
alt: str (اختیاری)\n
یک مدل Product که دارای این فیلدها باشد:\n
name: str\n
price: float\n
image: Image | None = None\n
مسیر POST /products/ که اطلاعات را دریافت و مقدار برگرداند.
📌 مثال ورودی:

json
Copy
Edit
{
  "name": "iPhone 14",
  "price": 999.99,
  "image": {
    "url": "https://example.com/iphone14.jpg",
    "alt": "iPhone 14"
  }
}
✅ خروجی مورد انتظار:

json
Copy
Edit
{
  "name": "iPhone 14",
  "price": 999.99,
  "image": {
    "url": "https://example.com/iphone14.jpg",
    "alt": "iPhone 14"
  }
}
🔐 تمرین ۵: دریافت چند هدر مختلف و اعتبارسنجی آن‌ها
🔹 هدف: دریافت چند هدر مرتبط با امنیت و اعتبارسنجی آن‌ها.

✅ وظایف:

مسیر GET /security/ که اطلاعات هدرهای زیر را دریافت کند:\n
X-API-Key: str → الزامی و نباید خالی باشد.\n
X-Client-ID: str | None → اختیاری.\n
مقدار X-API-Key را بررسی کند و اگر مقدار "supersecret" نبود، خطای 401 برگرداند.\n
مقدار هدرها را در پاسخ نمایش دهد.\n
📌 مثال درخواست معتبر:

makefile
Copy
Edit
GET /security/
X-API-Key: supersecret
X-Client-ID: 12345
✅ خروجی مورد انتظار:

json
Copy
Edit
{
  "X-API-Key": "supersecret",
  "X-Client-ID": "12345"
}
❌ اگر X-API-Key مقدار صحیحی نداشت، باید خطای 401 برگردد.

🎯 تمرین‌های چالش‌برانگیز‌تر
✅ اگر موارد بالا رو به‌راحتی انجام دادی، حالا به چالش‌های پیشرفته‌تر برو! 😎

🔥 چالش ۱: مدیریت لاگین و احراز هویت
مسیر POST /login/ بساز که نام کاربری و رمز عبور را دریافت کند.
اگر اطلاعات صحیح بود، یک توکن در کوکی تنظیم کند (auth_token).
مسیر GET /profile/ بساز که فقط در صورت وجود کوکی auth_token اجرا شود.
🔥 چالش ۲: ذخیره و بازیابی اطلاعات با Pydantic
مسیر POST /users/ که اطلاعات کاربران را در لیستی در حافظه سرور ذخیره کند.
مسیر GET /users/ که لیست کاربران را نمایش دهد.
📌 مثال داده کاربران:

json
Copy
Edit
[
  {
    "id": 1,
    "name": "Ali",
    "age": 25
  },
  {
    "id": 2,
    "name": "Sara",
    "age": 30
  }
]
🔥 چالش ۳: مدیریت درخواست‌های PUT و DELETE
مسیر PUT /items/{item_id} که یک آیتم را بروزرسانی کند.
مسیر DELETE /items/{item_id} که یک آیتم را حذف کند.
📌 مثال درخواست PUT:

json
Copy
Edit
{
  "name": "MacBook Pro",
  "price": 1999.99
}
✅ بعد از DELETE, آیتم دیگر نباید در لیست باشد!

📢 حالا نوبت توئه! 💪
تمرین‌های بالا را گام‌به‌گام انجام بده و اگر به مشکلی برخوردی، بگو تا راهنمایی‌ات کنم. 😎

🚀 کدهایت را تست کن، APIهای واقعی بساز و مهارت FastAPI‌ات را تقویت کن! 🔥