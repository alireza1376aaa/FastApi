🎯 تمرین‌های FastAPI برای یادگیری بهتر مباحث وابستگی‌ها (Dependencies)
✅ هدف: این تمرین‌ها به شما کمک می‌کنند وابستگی‌ها، yield، Global Dependencies، Sub-dependencies و Classes as Dependencies را بهتر درک کنید.

🔵 ۱. تمرین مدیریت پایگاه داده با yield
📝 تمرین:
یک وابستگی (get_db()) ایجاد کنید که یک اتصال به پایگاه داده را مدیریت کند.

هنگام ورود، یک اتصال به پایگاه داده باز شود.
هنگام خروج، اتصال به درستی بسته شود.
این اتصال را در مسیر /items/ استفاده کنید.
✅ نمونه ورودی و خروجی مورد انتظار:

http
Copy
Edit
GET /items/
📌 خروجی کنسول:

Copy
Edit
✅ اتصال به دیتابیس باز شد
🛑 اتصال به دیتابیس بسته شد
📌 پاسخ API:

json
Copy
Edit
{"message": "Database connection is active"}
🟡 ۲. تمرین Global Dependencies برای احراز هویت
📝 تمرین:
یک Global Dependency برای احراز هویت کاربران ایجاد کنید که:

مقدار هدر X-Token را بررسی کند.
اگر مقدار آن "valid-token" نبود، خطای ۴۰۰ بازگرداند.
این وابستگی را در سطح کل برنامه اضافه کنید، به‌طوری که تمام مسیرها نیاز به این احراز هویت داشته باشند.
✅ نمونه درخواست معتبر:

http
Copy
Edit
GET /items/
X-Token: valid-token
📌 پاسخ API:

json
Copy
Edit
{"items": ["Book", "Laptop"]}
✅ نمونه درخواست نامعتبر:

http
Copy
Edit
GET /items/
X-Token: invalid-token
❌ پاسخ API:

json
Copy
Edit
{"detail": "Invalid Token"}
🔴 ۳. تمرین Dependencies in Path Operation Decorators
📝 تمرین:
یک مسیر /secure-data/ ایجاد کنید که وابستگی احراز هویت (verify_token) را فقط در این مسیر خاص اجرا کند.

مقدار X-Token باید "super-secret-token" باشد، در غیر این صورت خطای ۴۰۳ بازگردانده شود.
مسیر /public-data/ باید بدون نیاز به احراز هویت در دسترس باشد.
✅ نمونه درخواست معتبر:

http
Copy
Edit
GET /secure-data/
X-Token: super-secret-token
📌 پاسخ API:

json
Copy
Edit
{"message": "Secure data accessed"}
✅ نمونه درخواست نامعتبر:

http
Copy
Edit
GET /secure-data/
X-Token: invalid-token
❌ پاسخ API:

json
Copy
Edit
{"detail": "Forbidden"}
✅ نمونه درخواست به مسیر عمومی:

http
Copy
Edit
GET /public-data/
📌 پاسخ API:

json
Copy
Edit
{"message": "Public data accessed"}
🟢 ۴. تمرین Sub-dependencies - ترکیب کوکی و پارامتر جستجو
📝 تمرین:
یک سیستم ذخیره‌سازی جستجو پیاده‌سازی کنید که:

ابتدا مقدار q را از پارامتر جستجو دریافت کند.
اگر q مقدار نداشت، مقدار last_query از کوکی خوانده شود.
در مسیر /search/ این سیستم اجرا شود.
✅ نمونه درخواست با مقدار q:

http
Copy
Edit
GET /search/?q=laptop
📌 پاسخ API:

json
Copy
Edit
{"query": "laptop"}
✅ نمونه درخواست بدون q اما با مقدار last_query در کوکی:

h
Copy
Edit
GET /search/
Cookie: last_query=phone
📌 پاسخ API:

json
Copy
Edit
{"query": "phone"}
✅ نمونه درخواست بدون q و بدون کوکی:

http
Copy
Edit
GET /search/
📌 پاسخ API:

json
Copy
Edit
{"query": "No previous search"}
🔵 ۵. تمرین Classes as Dependencies برای مدیریت پارامترها
📝 تمرین:
یک کلاس CommonParams برای مدیریت پارامترهای جستجو (q, limit) بسازید که:

q مقدار اختیاری باشد.
limit مقدار پیش‌فرض ۱۰ داشته باشد.
مسیر /items/ از این کلاس برای خواندن پارامترها استفاده کند.
✅ نمونه درخواست با مقدار q و limit:

http
Copy
Edit
GET /items/?q=fastapi&limit=5
📌 پاسخ API:

json
Copy
Edit
{"query": "fastapi", "limit": 5}
✅ نمونه درخواست بدون مقدار q:

http
Copy
Edit
GET /items/?limit=20
📌 پاسخ API:

json
Copy
Edit
{"query": null, "limit": 20}
✅ نمونه درخواست بدون مقدار limit:

http
Copy
Edit
GET /items/?q=python
📌 پاسخ API:

json
Copy
Edit
{"query": "python", "limit": 10}
🔥 چالش نهایی: ترکیب تمام موارد در یک پروژه کوچک
✅ سناریو:
یک API برای مدیریت محصولات یک فروشگاه آنلاین ایجاد کنید که شامل موارد زیر باشد:
1️⃣ مدیریت پایگاه داده با yield (اتصال به دیتابیس و بستن آن).
2️⃣ احراز هویت با Global Dependencies (بررسی توکن X-Token).
3️⃣ اعمال وابستگی احراز هویت فقط در مسیرهای خاص (/admin/، /orders/).
4️⃣ استفاده از Sub-dependencies برای خواندن فیلترهای جستجو.
5️⃣ استفاده از کلاس به‌عنوان dependency برای مدیریت پارامترهای ورودی.

📌 در این پروژه، API شما باید درخواست‌های زیر را مدیریت کند:

http
Copy
Edit
GET /products/?q=laptop&limit=5
http
Copy
Edit
GET /admin/dashboard/
X-Token: admin-token
http
Copy
Edit
GET /orders/
X-Token: customer-token
❌ در صورت ورود کاربر نامعتبر، باید خطای مناسب ارسال شود.

💡 با انجام این تمرین‌ها، مهارت شما در مدیریت وابستگی‌ها در FastAPI به سطح پیشرفته خواهد رسید! 🚀
🔥 موفق باشید! 😃